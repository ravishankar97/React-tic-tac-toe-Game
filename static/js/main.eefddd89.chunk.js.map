{"version":3,"sources":["Components/square.jsx","Components/boardComp.jsx","App.js","index.js"],"names":["SquareComponent","props","handleClick","useContext","onClickContext","className","squares","resulter","result","data","indexOf","value","onClick","buttonClick","type","index","history","stepNumber","squareValues","generateRow","start","num_of_cols","row","j","push","generateSquare","key_val","key","BoardComponent","rows","columns","board","i","generateBoard","React","createContext","initialState","Array","fill","location","col","active","XisNext","status","player","reducer","state","action","history_copy","slice","square_values","length","Math","floor","map","move","final_copy","concat","calculateWinner","res","winLines","return_data","filter","item","a","b","c","App","useReducer","current_state","dispatch","result_text","Provider","style","marginTop","color","desc","btnClasses","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eefddd89.chunk.js","sourcesContent":["import React from 'react';\r\nimport { useContext } from 'react';\r\nimport { onClickContext } from '../App';\r\n\r\n\r\nconst SquareComponent = (props) => {\r\n  const handleClick = useContext(onClickContext)\r\n  \r\n    return (\r\n        <button\r\n          className={(handleClick.squares.resulter.result.data.indexOf(props.value)===-1) ? \"square\":\"winningSquares square\"} onClick={()=>handleClick.buttonClick({type:'INSERT_DATA',index:props.value})}>\r\n          \r\n          {handleClick.squares.history[handleClick.squares.stepNumber].squareValues[props.value]}\r\n        </button>\r\n      );\r\n}\r\n \r\nexport default SquareComponent;","import React from 'react';\r\nimport SquareComponent from './square';\r\n\r\n\r\n\r\nconst generateBoard=(rows,columns)=>{\r\n    let board=[];\r\n\r\n    for(let i=0;i<rows * columns ;i++){\r\n        if(i%rows === 0){\r\n            board.push(\r\n                <div className=\"board-row\" key={i}>\r\n                    {generateRow(i,i+columns)}\r\n                </div>\r\n            );\r\n        }\r\n    }\r\nreturn board;\r\n\r\n}\r\n\r\nconst generateRow=(start,num_of_cols)=>{\r\n    let row=[];\r\n    for(let j=start;j<num_of_cols;j++){\r\n        row.push( generateSquare(j));\r\n    }\r\n\r\n    return row;\r\n}\r\n\r\nconst generateSquare=(key_val)=>{\r\n    return(\r\n    <SquareComponent \r\n        key={key_val}\r\n        value={key_val}\r\n        \r\n         />);\r\n}\r\n\r\nconst BoardComponent = () => {\r\n\r\n    \r\n    return ( \r\n\r\n        <div>\r\n                {generateBoard(3,3)}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default BoardComponent;","import React, { useReducer } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport BoardComponent from './Components/boardComp';\n\nexport const onClickContext = React.createContext();\n\n\nconst initialState ={\n  history : [\n    {\n        squareValues: Array(9).fill(null),\n        location:{\n            row:0,\n            col:0\n\t\t},\n\t\tactive:false\n\t\t\n    }\n  ],\n  XisNext : true,\n  stepNumber : 0,\n  \n  resulter :{\n\t  status:null,\n\t  result:{\n\t\tplayer:\"\",\n\t\tdata:[]\n\t  }\n  }\n  \n\n}\n\nconst reducer = (state,action) =>{\n  \n  switch(action.type){\n    case 'INSERT_DATA':{\n    \tconst history_copy = state.history.slice(0,state.stepNumber + 1)           \n      \tconst current_move_state = history_copy[history_copy.length - 1]\n\t\tconst square_values = current_move_state.squareValues.slice();\n\t\tconst current_result = state.resulter.result.data;\n\t\t\n      \tif(current_result.length > 0 || square_values[action.index]){\n\t\t\treturn state;\n\t\t  }\n\t\t  square_values[action.index] = state.XisNext ? \"X\" :\"O\";\n\t\t  \n      \tconst col = Math.floor(action.index % 3) + 1;\n\t\tconst row = Math.floor(action.index / 3) + 1;\n\t\t\n\t\thistory_copy.map((move)=>\n\t\t\t(\n\t\t\t\tmove.active=false\n\t\t))\n\n    \tconst  final_copy= history_copy.concat([\n      \t{\n        \tsquareValues:square_values,\n        \tlocation:{\n          \t\trow:row,\n          \t\tcol:col\n\t\t\t},\n\t\t\tactive:true\n\t\t  }])\n\n\t\tconst result = calculateWinner(square_values)\n\t \treturn {...state , history : final_copy , XisNext:!state.XisNext,stepNumber:state.stepNumber+1,resulter:result }\n\t \n      \n\t}\n\n\tcase 'RESET_GAME':{\n\t\treturn initialState;\n\t}\n\n\tcase \"MOVE_POS\":{\n\t\tconst history = state.history\n\t\tlet resulter ={\n\t\t\tstatus:null,\n\t\t\tresult:{\n\t\t\t  player:\"\",\n\t\t\t  data:[]\n\t\t\t}\n\t\t}\n\t\thistory.map((move)=>\n\t\t\t(\n\t\t\t\tmove.active=false\n\t\t))\n\t\thistory[action.value].active=true;\n\t\tconst XisNext = action.value %2 === 0\n\n\t\tconst square_values = history[action.value].squareValues.slice();\n\n\t\tlet res=calculateWinner(square_values);\n\t\tif(res)\n\t\t\tresulter=res;\n\t\t\n\t\n\t\treturn {...state,history:history,XisNext:XisNext,resulter:resulter,stepNumber:action.value }\n\t\t\n\t\t\n\t}\n\t\n\tdefault:{\n\t\treturn initialState;\n\t\t\n\t}\n  }\n}\n\nconst calculateWinner=(square_values)=>{\n\tconst winLines=[\n\t\t[0, 1, 2],\n    \t[3, 4, 5],\n    \t[6, 7, 8],\n    \t[0, 3, 6],\n    \t[1, 4, 7],\n    \t[2, 5, 8],\n    \t[0, 4, 8],\n    \t[2, 4, 6],\n\t]\n\n\tlet return_data={status:null,result:{player:\"\",data:[]}}\n\n\n\tlet tempSq = square_values.filter(item => item === null);\n\tif (tempSq.length === 0) {\n\t\treturn_data = { status: \"draw\", result: {player:\"\",data:[]}}\n\t\treturn return_data\n\t}\n\n\tfor(let i=0;i< winLines.length;i++){\n\t\tconst [a,b,c] = winLines[i]\n\t\tif(square_values[a] && square_values[a]===square_values[b] && square_values[a]===square_values[c]){\n\t\t\treturn_data = {status:\"win\", result:{player:square_values[a],data:[a,b,c]}}\n\t\t\treturn return_data;\n\t\t}\n\n\t}\n\treturn return_data\n}\n\n\n\n\nfunction App() {\n\n  const [current_state,dispatch] = useReducer(reducer,initialState);\n\n\tlet result_text=\"\" ;\n  if(current_state.resulter.status ===\"win\"){\n\tresult_text = current_state.resulter.result.player+\" is the winner\";\n  }else if(current_state.resulter.status ===\"draw\"){\n\t  result_text = \"Match Draw\"\n  }\n  return (\n    <onClickContext.Provider value={{squares:current_state,buttonClick:dispatch}}>\n\t<div className='game'>\n        <BoardComponent />\n\n\t\t{\n\t\t\tresult_text.length > 0 ? (\n\t\t\t<div className=\"reset-btn\" >\n\t\t\t<button className=\"btn btn-warning\"  onClick={()=>dispatch({type:'RESET_GAME'})}>Play Again</button>\n\t\t\t\n\t\t  </div>\n\t\t) : (\n\t\t\t<div className='reset-btn'>\n                <button className=\"btn btn-danger\"  onClick={()=>dispatch({type:'RESET_GAME'})}>Reset Game</button>\n                \n              </div>\n\t\t)}\t\t\n\t</div>\n\n\t\n\t<div className='toggle-btn'>\n\t\t\t\n\t\t\t\n\n\t\t<p className=\"bg-success\" style={{marginTop:15,color:\"white\"}}>{result_text} </p>\n        <p>Steps Occured</p>\n\t\t\t\t\n\t\t{\n\t\t\tcurrent_state.history.map((move, index) => {\n\t\t\t\tconst desc = index ? \"Go to move #\" + index : \"Go to game start\";\n\t\t\t\tlet btnClasses='btn btn-sm btn-'\n\t\t\t\t\n\t\t\t\t\treturn (\n\t\t\t\t\t<li  key={index}>\n\t\t\t\t\t\t<button className={current_state.history[index].active ? btnClasses+'primary':btnClasses+'secondary'} onClick={()=>dispatch({type:\"MOVE_POS\",value:index})}>\n\t\t\t\t\t\t{`${desc} (${move.location.row}, ${move.location.col})`}\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</li>)\n\t\t\t\t\n\t\t\t})\n\t\t}\n    \n    </div>\n    </onClickContext.Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n"],"sourceRoot":""}